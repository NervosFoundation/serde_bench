// This file is generated by rust-protobuf 2.0.5. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct SyncMessage {
    // message oneof groups
    pub payload: ::std::option::Option<SyncMessage_oneof_payload>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum SyncMessage_oneof_payload {
    getheaders(GetHeaders),
    headers(Headers),
}

impl SyncMessage {
    pub fn new() -> SyncMessage {
        ::std::default::Default::default()
    }

    // .GetHeaders getheaders = 1;

    pub fn clear_getheaders(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_getheaders(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_getheaders(&mut self, v: GetHeaders) {
        self.payload = ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(v))
    }

    // Mutable pointer to the field.
    pub fn mut_getheaders(&mut self) -> &mut GetHeaders {
        if let ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(GetHeaders::new()));
        }
        match self.payload {
            ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_getheaders(&mut self) -> GetHeaders {
        if self.has_getheaders() {
            match self.payload.take() {
                ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(v)) => v,
                _ => panic!(),
            }
        } else {
            GetHeaders::new()
        }
    }

    pub fn get_getheaders(&self) -> &GetHeaders {
        match self.payload {
            ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(ref v)) => v,
            _ => GetHeaders::default_instance(),
        }
    }

    // .Headers headers = 2;

    pub fn clear_headers(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_headers(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(SyncMessage_oneof_payload::headers(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: Headers) {
        self.payload = ::std::option::Option::Some(SyncMessage_oneof_payload::headers(v))
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut Headers {
        if let ::std::option::Option::Some(SyncMessage_oneof_payload::headers(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(SyncMessage_oneof_payload::headers(Headers::new()));
        }
        match self.payload {
            ::std::option::Option::Some(SyncMessage_oneof_payload::headers(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_headers(&mut self) -> Headers {
        if self.has_headers() {
            match self.payload.take() {
                ::std::option::Option::Some(SyncMessage_oneof_payload::headers(v)) => v,
                _ => panic!(),
            }
        } else {
            Headers::new()
        }
    }

    pub fn get_headers(&self) -> &Headers {
        match self.payload {
            ::std::option::Option::Some(SyncMessage_oneof_payload::headers(ref v)) => v,
            _ => Headers::default_instance(),
        }
    }
}

impl ::protobuf::Message for SyncMessage {
    fn is_initialized(&self) -> bool {
        if let Some(SyncMessage_oneof_payload::getheaders(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SyncMessage_oneof_payload::headers(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(SyncMessage_oneof_payload::headers(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &SyncMessage_oneof_payload::getheaders(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SyncMessage_oneof_payload::headers(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &SyncMessage_oneof_payload::getheaders(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SyncMessage_oneof_payload::headers(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SyncMessage {
        SyncMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GetHeaders>(
                    "getheaders",
                    SyncMessage::has_getheaders,
                    SyncMessage::get_getheaders,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Headers>(
                    "headers",
                    SyncMessage::has_headers,
                    SyncMessage::get_headers,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SyncMessage>(
                    "SyncMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SyncMessage {
        static mut instance: ::protobuf::lazy::Lazy<SyncMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SyncMessage,
        };
        unsafe {
            instance.get(SyncMessage::new)
        }
    }
}

impl ::protobuf::Clear for SyncMessage {
    fn clear(&mut self) {
        self.clear_getheaders();
        self.clear_headers();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SyncMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SyncMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetHeaders {
    // message fields
    pub version: u32,
    pub block_locator_hashes: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub hash_stop: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl GetHeaders {
    pub fn new() -> GetHeaders {
        ::std::default::Default::default()
    }

    // uint32 version = 1;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    pub fn get_version(&self) -> u32 {
        self.version
    }

    // repeated bytes block_locator_hashes = 2;

    pub fn clear_block_locator_hashes(&mut self) {
        self.block_locator_hashes.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_locator_hashes(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.block_locator_hashes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_block_locator_hashes(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.block_locator_hashes
    }

    // Take field
    pub fn take_block_locator_hashes(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.block_locator_hashes, ::protobuf::RepeatedField::new())
    }

    pub fn get_block_locator_hashes(&self) -> &[::std::vec::Vec<u8>] {
        &self.block_locator_hashes
    }

    // bytes hash_stop = 3;

    pub fn clear_hash_stop(&mut self) {
        self.hash_stop.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash_stop(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash_stop = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash_stop(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash_stop
    }

    // Take field
    pub fn take_hash_stop(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash_stop, ::std::vec::Vec::new())
    }

    pub fn get_hash_stop(&self) -> &[u8] {
        &self.hash_stop
    }
}

impl ::protobuf::Message for GetHeaders {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.block_locator_hashes)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash_stop)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.block_locator_hashes {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        if !self.hash_stop.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.hash_stop);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        for v in &self.block_locator_hashes {
            os.write_bytes(2, &v)?;
        };
        if !self.hash_stop.is_empty() {
            os.write_bytes(3, &self.hash_stop)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetHeaders {
        GetHeaders::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "version",
                    |m: &GetHeaders| { &m.version },
                    |m: &mut GetHeaders| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "block_locator_hashes",
                    |m: &GetHeaders| { &m.block_locator_hashes },
                    |m: &mut GetHeaders| { &mut m.block_locator_hashes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash_stop",
                    |m: &GetHeaders| { &m.hash_stop },
                    |m: &mut GetHeaders| { &mut m.hash_stop },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetHeaders>(
                    "GetHeaders",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetHeaders {
        static mut instance: ::protobuf::lazy::Lazy<GetHeaders> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetHeaders,
        };
        unsafe {
            instance.get(GetHeaders::new)
        }
    }
}

impl ::protobuf::Clear for GetHeaders {
    fn clear(&mut self) {
        self.clear_version();
        self.clear_block_locator_hashes();
        self.clear_hash_stop();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetHeaders {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetHeaders {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Headers {
    // message fields
    pub headers: ::protobuf::RepeatedField<Header>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Headers {
    pub fn new() -> Headers {
        ::std::default::Default::default()
    }

    // repeated .Header headers = 1;

    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<Header>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<Header> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<Header> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }

    pub fn get_headers(&self) -> &[Header] {
        &self.headers
    }
}

impl ::protobuf::Message for Headers {
    fn is_initialized(&self) -> bool {
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.headers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Headers {
        Headers::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Header>>(
                    "headers",
                    |m: &Headers| { &m.headers },
                    |m: &mut Headers| { &mut m.headers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Headers>(
                    "Headers",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Headers {
        static mut instance: ::protobuf::lazy::Lazy<Headers> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Headers,
        };
        unsafe {
            instance.get(Headers::new)
        }
    }
}

impl ::protobuf::Clear for Headers {
    fn clear(&mut self) {
        self.clear_headers();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Headers {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Headers {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Header {
    // message fields
    pub version: u32,
    pub parent_hash: ::std::vec::Vec<u8>,
    pub timestamp: u64,
    pub number: u64,
    pub txs_commit: ::std::vec::Vec<u8>,
    pub txs_proposal: ::std::vec::Vec<u8>,
    pub difficulty: ::std::vec::Vec<u8>,
    pub nonce: u64,
    pub proof: ::std::vec::Vec<u8>,
    pub cellbase_id: ::std::vec::Vec<u8>,
    pub uncles_hash: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // uint32 version = 1;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    pub fn get_version(&self) -> u32 {
        self.version
    }

    // bytes parent_hash = 2;

    pub fn clear_parent_hash(&mut self) {
        self.parent_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.parent_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.parent_hash
    }

    // Take field
    pub fn take_parent_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.parent_hash, ::std::vec::Vec::new())
    }

    pub fn get_parent_hash(&self) -> &[u8] {
        &self.parent_hash
    }

    // uint64 timestamp = 3;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }

    // uint64 number = 4;

    pub fn clear_number(&mut self) {
        self.number = 0;
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: u64) {
        self.number = v;
    }

    pub fn get_number(&self) -> u64 {
        self.number
    }

    // bytes txs_commit = 5;

    pub fn clear_txs_commit(&mut self) {
        self.txs_commit.clear();
    }

    // Param is passed by value, moved
    pub fn set_txs_commit(&mut self, v: ::std::vec::Vec<u8>) {
        self.txs_commit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txs_commit(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.txs_commit
    }

    // Take field
    pub fn take_txs_commit(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.txs_commit, ::std::vec::Vec::new())
    }

    pub fn get_txs_commit(&self) -> &[u8] {
        &self.txs_commit
    }

    // bytes txs_proposal = 6;

    pub fn clear_txs_proposal(&mut self) {
        self.txs_proposal.clear();
    }

    // Param is passed by value, moved
    pub fn set_txs_proposal(&mut self, v: ::std::vec::Vec<u8>) {
        self.txs_proposal = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txs_proposal(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.txs_proposal
    }

    // Take field
    pub fn take_txs_proposal(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.txs_proposal, ::std::vec::Vec::new())
    }

    pub fn get_txs_proposal(&self) -> &[u8] {
        &self.txs_proposal
    }

    // bytes difficulty = 7;

    pub fn clear_difficulty(&mut self) {
        self.difficulty.clear();
    }

    // Param is passed by value, moved
    pub fn set_difficulty(&mut self, v: ::std::vec::Vec<u8>) {
        self.difficulty = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_difficulty(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.difficulty
    }

    // Take field
    pub fn take_difficulty(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.difficulty, ::std::vec::Vec::new())
    }

    pub fn get_difficulty(&self) -> &[u8] {
        &self.difficulty
    }

    // uint64 nonce = 8;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // bytes proof = 9;

    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof
    }

    // Take field
    pub fn take_proof(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof, ::std::vec::Vec::new())
    }

    pub fn get_proof(&self) -> &[u8] {
        &self.proof
    }

    // bytes cellbase_id = 10;

    pub fn clear_cellbase_id(&mut self) {
        self.cellbase_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cellbase_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.cellbase_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cellbase_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cellbase_id
    }

    // Take field
    pub fn take_cellbase_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cellbase_id, ::std::vec::Vec::new())
    }

    pub fn get_cellbase_id(&self) -> &[u8] {
        &self.cellbase_id
    }

    // bytes uncles_hash = 11;

    pub fn clear_uncles_hash(&mut self) {
        self.uncles_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_uncles_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.uncles_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uncles_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.uncles_hash
    }

    // Take field
    pub fn take_uncles_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.uncles_hash, ::std::vec::Vec::new())
    }

    pub fn get_uncles_hash(&self) -> &[u8] {
        &self.uncles_hash
    }
}

impl ::protobuf::Message for Header {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.parent_hash)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.txs_commit)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.txs_proposal)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.difficulty)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cellbase_id)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.uncles_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.parent_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.parent_hash);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.number != 0 {
            my_size += ::protobuf::rt::value_size(4, self.number, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.txs_commit.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.txs_commit);
        }
        if !self.txs_proposal.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.txs_proposal);
        }
        if !self.difficulty.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.difficulty);
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(8, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.proof);
        }
        if !self.cellbase_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.cellbase_id);
        }
        if !self.uncles_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.uncles_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if !self.parent_hash.is_empty() {
            os.write_bytes(2, &self.parent_hash)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        if self.number != 0 {
            os.write_uint64(4, self.number)?;
        }
        if !self.txs_commit.is_empty() {
            os.write_bytes(5, &self.txs_commit)?;
        }
        if !self.txs_proposal.is_empty() {
            os.write_bytes(6, &self.txs_proposal)?;
        }
        if !self.difficulty.is_empty() {
            os.write_bytes(7, &self.difficulty)?;
        }
        if self.nonce != 0 {
            os.write_uint64(8, self.nonce)?;
        }
        if !self.proof.is_empty() {
            os.write_bytes(9, &self.proof)?;
        }
        if !self.cellbase_id.is_empty() {
            os.write_bytes(10, &self.cellbase_id)?;
        }
        if !self.uncles_hash.is_empty() {
            os.write_bytes(11, &self.uncles_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Header {
        Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "version",
                    |m: &Header| { &m.version },
                    |m: &mut Header| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "parent_hash",
                    |m: &Header| { &m.parent_hash },
                    |m: &mut Header| { &mut m.parent_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &Header| { &m.timestamp },
                    |m: &mut Header| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "number",
                    |m: &Header| { &m.number },
                    |m: &mut Header| { &mut m.number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "txs_commit",
                    |m: &Header| { &m.txs_commit },
                    |m: &mut Header| { &mut m.txs_commit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "txs_proposal",
                    |m: &Header| { &m.txs_proposal },
                    |m: &mut Header| { &mut m.txs_proposal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "difficulty",
                    |m: &Header| { &m.difficulty },
                    |m: &mut Header| { &mut m.difficulty },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &Header| { &m.nonce },
                    |m: &mut Header| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "proof",
                    |m: &Header| { &m.proof },
                    |m: &mut Header| { &mut m.proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "cellbase_id",
                    |m: &Header| { &m.cellbase_id },
                    |m: &mut Header| { &mut m.cellbase_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "uncles_hash",
                    |m: &Header| { &m.uncles_hash },
                    |m: &mut Header| { &mut m.uncles_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Header>(
                    "Header",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Header {
        static mut instance: ::protobuf::lazy::Lazy<Header> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Header,
        };
        unsafe {
            instance.get(Header::new)
        }
    }
}

impl ::protobuf::Clear for Header {
    fn clear(&mut self) {
        self.clear_version();
        self.clear_parent_hash();
        self.clear_timestamp();
        self.clear_number();
        self.clear_txs_commit();
        self.clear_txs_proposal();
        self.clear_difficulty();
        self.clear_nonce();
        self.clear_proof();
        self.clear_cellbase_id();
        self.clear_uncles_hash();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bbench.proto\"m\n\x0bSyncMessage\x12-\n\ngetheaders\x18\x01\x20\x01\
    (\x0b2\x0b.GetHeadersH\0R\ngetheaders\x12$\n\x07headers\x18\x02\x20\x01(\
    \x0b2\x08.HeadersH\0R\x07headersB\t\n\x07payload\"u\n\nGetHeaders\x12\
    \x18\n\x07version\x18\x01\x20\x01(\rR\x07version\x120\n\x14block_locator\
    _hashes\x18\x02\x20\x03(\x0cR\x12blockLocatorHashes\x12\x1b\n\thash_stop\
    \x18\x03\x20\x01(\x0cR\x08hashStop\",\n\x07Headers\x12!\n\x07headers\x18\
    \x01\x20\x03(\x0b2\x07.HeaderR\x07headers\"\xc9\x02\n\x06Header\x12\x18\
    \n\x07version\x18\x01\x20\x01(\rR\x07version\x12\x1f\n\x0bparent_hash\
    \x18\x02\x20\x01(\x0cR\nparentHash\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\
    \x04R\ttimestamp\x12\x16\n\x06number\x18\x04\x20\x01(\x04R\x06number\x12\
    \x1d\n\ntxs_commit\x18\x05\x20\x01(\x0cR\ttxsCommit\x12!\n\x0ctxs_propos\
    al\x18\x06\x20\x01(\x0cR\x0btxsProposal\x12\x1e\n\ndifficulty\x18\x07\
    \x20\x01(\x0cR\ndifficulty\x12\x14\n\x05nonce\x18\x08\x20\x01(\x04R\x05n\
    once\x12\x14\n\x05proof\x18\t\x20\x01(\x0cR\x05proof\x12\x1f\n\x0bcellba\
    se_id\x18\n\x20\x01(\x0cR\ncellbaseId\x12\x1f\n\x0buncles_hash\x18\x0b\
    \x20\x01(\x0cR\nunclesHashJ\x94\n\n\x06\x12\x04\0\0\x1f\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x07\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x02\x08\x13\n\x0c\n\x04\x04\0\x08\0\x12\x04\x03\x04\x06\
    \x05\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x03\n\x11\n\x0b\n\x04\x04\0\x02\
    \0\x12\x03\x04\x08\"\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x04\x08\x12\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x04\x13\x1d\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x04\x20!\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x05\x08\x1c\n\
    \x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x05\x08\x0f\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x05\x10\x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x05\
    \x1a\x1b\n\n\n\x02\x04\x01\x12\x04\t\0\r\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\t\x08\x12\n\x0b\n\x04\x04\x01\x02\0\x12\x03\n\x04\x17\n\r\n\x05\x04\
    \x01\x02\0\x04\x12\x04\n\x04\t\x14\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\
    \n\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\x0b\x12\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03\n\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0b\
    \x04,\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x0b\x04\x0c\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x0b\r\x12\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x0b\x13'\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0b*+\n\x0b\n\
    \x04\x04\x01\x02\x02\x12\x03\x0c\x04\x18\n\r\n\x05\x04\x01\x02\x02\x04\
    \x12\x04\x0c\x04\x0b,\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0c\x04\t\
    \n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x0c\n\x13\n\x0c\n\x05\x04\x01\
    \x02\x02\x03\x12\x03\x0c\x16\x17\n\n\n\x02\x04\x02\x12\x04\x0f\0\x11\x01\
    \n\n\n\x03\x04\x02\x01\x12\x03\x0f\x08\x0f\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03\x10\x04\x20\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x10\x04\x0c\n\x0c\
    \n\x05\x04\x02\x02\0\x06\x12\x03\x10\r\x13\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x10\x14\x1b\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x10\x1e\x1f\n\
    \n\n\x02\x04\x03\x12\x04\x13\0\x1f\x01\n\n\n\x03\x04\x03\x01\x12\x03\x13\
    \x08\x0e\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x14\x04!\n\r\n\x05\x04\x03\
    \x02\0\x04\x12\x04\x14\x04\x13\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\
    \x14\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x14\x0b\x12\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03\x14\x1f\x20\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03\x15\x04!\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x15\x04\x14!\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x03\x15\x04\t\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03\x15\x0b\x16\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x15\x1f\
    \x20\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x16\x04!\n\r\n\x05\x04\x03\x02\
    \x02\x04\x12\x04\x16\x04\x15!\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\
    \x16\x04\n\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x16\x0b\x14\n\x0c\n\
    \x05\x04\x03\x02\x02\x03\x12\x03\x16\x1f\x20\n\x0b\n\x04\x04\x03\x02\x03\
    \x12\x03\x17\x04!\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04\x17\x04\x16!\n\
    \x0c\n\x05\x04\x03\x02\x03\x05\x12\x03\x17\x04\n\n\x0c\n\x05\x04\x03\x02\
    \x03\x01\x12\x03\x17\x0b\x11\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03\x17\
    \x1f\x20\n\x0b\n\x04\x04\x03\x02\x04\x12\x03\x18\x04!\n\r\n\x05\x04\x03\
    \x02\x04\x04\x12\x04\x18\x04\x17!\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\
    \x03\x18\x04\t\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03\x18\x0b\x15\n\x0c\
    \n\x05\x04\x03\x02\x04\x03\x12\x03\x18\x1f\x20\n\x0b\n\x04\x04\x03\x02\
    \x05\x12\x03\x19\x04!\n\r\n\x05\x04\x03\x02\x05\x04\x12\x04\x19\x04\x18!\
    \n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x03\x19\x04\t\n\x0c\n\x05\x04\x03\
    \x02\x05\x01\x12\x03\x19\x0b\x17\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03\
    \x19\x1f\x20\n\x0b\n\x04\x04\x03\x02\x06\x12\x03\x1a\x04!\n\r\n\x05\x04\
    \x03\x02\x06\x04\x12\x04\x1a\x04\x19!\n\x0c\n\x05\x04\x03\x02\x06\x05\
    \x12\x03\x1a\x04\t\n\x0c\n\x05\x04\x03\x02\x06\x01\x12\x03\x1a\x0b\x15\n\
    \x0c\n\x05\x04\x03\x02\x06\x03\x12\x03\x1a\x1f\x20\n\x0b\n\x04\x04\x03\
    \x02\x07\x12\x03\x1b\x04!\n\r\n\x05\x04\x03\x02\x07\x04\x12\x04\x1b\x04\
    \x1a!\n\x0c\n\x05\x04\x03\x02\x07\x05\x12\x03\x1b\x04\n\n\x0c\n\x05\x04\
    \x03\x02\x07\x01\x12\x03\x1b\x0b\x10\n\x0c\n\x05\x04\x03\x02\x07\x03\x12\
    \x03\x1b\x1f\x20\n\x0b\n\x04\x04\x03\x02\x08\x12\x03\x1c\x04!\n\r\n\x05\
    \x04\x03\x02\x08\x04\x12\x04\x1c\x04\x1b!\n\x0c\n\x05\x04\x03\x02\x08\
    \x05\x12\x03\x1c\x04\t\n\x0c\n\x05\x04\x03\x02\x08\x01\x12\x03\x1c\x0b\
    \x10\n\x0c\n\x05\x04\x03\x02\x08\x03\x12\x03\x1c\x1f\x20\n\x0b\n\x04\x04\
    \x03\x02\t\x12\x03\x1d\x04\"\n\r\n\x05\x04\x03\x02\t\x04\x12\x04\x1d\x04\
    \x1c!\n\x0c\n\x05\x04\x03\x02\t\x05\x12\x03\x1d\x04\t\n\x0c\n\x05\x04\
    \x03\x02\t\x01\x12\x03\x1d\x0b\x16\n\x0c\n\x05\x04\x03\x02\t\x03\x12\x03\
    \x1d\x1f!\n\x0b\n\x04\x04\x03\x02\n\x12\x03\x1e\x04\"\n\r\n\x05\x04\x03\
    \x02\n\x04\x12\x04\x1e\x04\x1d\"\n\x0c\n\x05\x04\x03\x02\n\x05\x12\x03\
    \x1e\x04\t\n\x0c\n\x05\x04\x03\x02\n\x01\x12\x03\x1e\x0b\x16\n\x0c\n\x05\
    \x04\x03\x02\n\x03\x12\x03\x1e\x1f!b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
