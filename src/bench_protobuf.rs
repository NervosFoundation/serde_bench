// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `schemas/bench.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct SyncMessage {
    // message oneof groups
    pub payload: ::std::option::Option<SyncMessage_oneof_payload>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SyncMessage {
    fn default() -> &'a SyncMessage {
        <SyncMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SyncMessage_oneof_payload {
    getheaders(GetHeaders),
    headers(Headers),
}

impl SyncMessage {
    pub fn new() -> SyncMessage {
        ::std::default::Default::default()
    }

    // .GetHeaders getheaders = 1;


    pub fn get_getheaders(&self) -> &GetHeaders {
        match self.payload {
            ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(ref v)) => v,
            _ => GetHeaders::default_instance(),
        }
    }
    pub fn clear_getheaders(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_getheaders(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_getheaders(&mut self, v: GetHeaders) {
        self.payload = ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(v))
    }

    // Mutable pointer to the field.
    pub fn mut_getheaders(&mut self) -> &mut GetHeaders {
        if let ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(GetHeaders::new()));
        }
        match self.payload {
            ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_getheaders(&mut self) -> GetHeaders {
        if self.has_getheaders() {
            match self.payload.take() {
                ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(v)) => v,
                _ => panic!(),
            }
        } else {
            GetHeaders::new()
        }
    }

    // .Headers headers = 2;


    pub fn get_headers(&self) -> &Headers {
        match self.payload {
            ::std::option::Option::Some(SyncMessage_oneof_payload::headers(ref v)) => v,
            _ => Headers::default_instance(),
        }
    }
    pub fn clear_headers(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_headers(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(SyncMessage_oneof_payload::headers(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: Headers) {
        self.payload = ::std::option::Option::Some(SyncMessage_oneof_payload::headers(v))
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut Headers {
        if let ::std::option::Option::Some(SyncMessage_oneof_payload::headers(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(SyncMessage_oneof_payload::headers(Headers::new()));
        }
        match self.payload {
            ::std::option::Option::Some(SyncMessage_oneof_payload::headers(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_headers(&mut self) -> Headers {
        if self.has_headers() {
            match self.payload.take() {
                ::std::option::Option::Some(SyncMessage_oneof_payload::headers(v)) => v,
                _ => panic!(),
            }
        } else {
            Headers::new()
        }
    }
}

impl ::protobuf::Message for SyncMessage {
    fn is_initialized(&self) -> bool {
        if let Some(SyncMessage_oneof_payload::getheaders(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SyncMessage_oneof_payload::headers(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(SyncMessage_oneof_payload::getheaders(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(SyncMessage_oneof_payload::headers(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &SyncMessage_oneof_payload::getheaders(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SyncMessage_oneof_payload::headers(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &SyncMessage_oneof_payload::getheaders(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SyncMessage_oneof_payload::headers(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SyncMessage {
        SyncMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GetHeaders>(
                    "getheaders",
                    SyncMessage::has_getheaders,
                    SyncMessage::get_getheaders,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Headers>(
                    "headers",
                    SyncMessage::has_headers,
                    SyncMessage::get_headers,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SyncMessage>(
                    "SyncMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SyncMessage {
        static mut instance: ::protobuf::lazy::Lazy<SyncMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SyncMessage,
        };
        unsafe {
            instance.get(SyncMessage::new)
        }
    }
}

impl ::protobuf::Clear for SyncMessage {
    fn clear(&mut self) {
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SyncMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SyncMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetHeaders {
    // message fields
    pub version: u32,
    pub block_locator_hashes: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub hash_stop: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetHeaders {
    fn default() -> &'a GetHeaders {
        <GetHeaders as ::protobuf::Message>::default_instance()
    }
}

impl GetHeaders {
    pub fn new() -> GetHeaders {
        ::std::default::Default::default()
    }

    // uint32 version = 1;


    pub fn get_version(&self) -> u32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    // repeated bytes block_locator_hashes = 2;


    pub fn get_block_locator_hashes(&self) -> &[::std::vec::Vec<u8>] {
        &self.block_locator_hashes
    }
    pub fn clear_block_locator_hashes(&mut self) {
        self.block_locator_hashes.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_locator_hashes(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.block_locator_hashes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_block_locator_hashes(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.block_locator_hashes
    }

    // Take field
    pub fn take_block_locator_hashes(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.block_locator_hashes, ::protobuf::RepeatedField::new())
    }

    // bytes hash_stop = 3;


    pub fn get_hash_stop(&self) -> &[u8] {
        &self.hash_stop
    }
    pub fn clear_hash_stop(&mut self) {
        self.hash_stop.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash_stop(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash_stop = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash_stop(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash_stop
    }

    // Take field
    pub fn take_hash_stop(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash_stop, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetHeaders {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.block_locator_hashes)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash_stop)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.block_locator_hashes {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        if !self.hash_stop.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.hash_stop);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        for v in &self.block_locator_hashes {
            os.write_bytes(2, &v)?;
        };
        if !self.hash_stop.is_empty() {
            os.write_bytes(3, &self.hash_stop)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetHeaders {
        GetHeaders::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "version",
                    |m: &GetHeaders| { &m.version },
                    |m: &mut GetHeaders| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "block_locator_hashes",
                    |m: &GetHeaders| { &m.block_locator_hashes },
                    |m: &mut GetHeaders| { &mut m.block_locator_hashes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash_stop",
                    |m: &GetHeaders| { &m.hash_stop },
                    |m: &mut GetHeaders| { &mut m.hash_stop },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetHeaders>(
                    "GetHeaders",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetHeaders {
        static mut instance: ::protobuf::lazy::Lazy<GetHeaders> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetHeaders,
        };
        unsafe {
            instance.get(GetHeaders::new)
        }
    }
}

impl ::protobuf::Clear for GetHeaders {
    fn clear(&mut self) {
        self.version = 0;
        self.block_locator_hashes.clear();
        self.hash_stop.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetHeaders {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetHeaders {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Headers {
    // message fields
    pub headers: ::protobuf::RepeatedField<Header>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Headers {
    fn default() -> &'a Headers {
        <Headers as ::protobuf::Message>::default_instance()
    }
}

impl Headers {
    pub fn new() -> Headers {
        ::std::default::Default::default()
    }

    // repeated .Header headers = 1;


    pub fn get_headers(&self) -> &[Header] {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<Header>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<Header> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<Header> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Headers {
    fn is_initialized(&self) -> bool {
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.headers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Headers {
        Headers::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Header>>(
                    "headers",
                    |m: &Headers| { &m.headers },
                    |m: &mut Headers| { &mut m.headers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Headers>(
                    "Headers",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Headers {
        static mut instance: ::protobuf::lazy::Lazy<Headers> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Headers,
        };
        unsafe {
            instance.get(Headers::new)
        }
    }
}

impl ::protobuf::Clear for Headers {
    fn clear(&mut self) {
        self.headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Headers {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Headers {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Header {
    // message fields
    pub version: u32,
    pub parent_hash: ::std::vec::Vec<u8>,
    pub timestamp: u64,
    pub number: u64,
    pub txs_commit: ::std::vec::Vec<u8>,
    pub txs_proposal: ::std::vec::Vec<u8>,
    pub difficulty: ::std::vec::Vec<u8>,
    pub nonce: u64,
    pub proof: ::std::vec::Vec<u8>,
    pub cellbase_id: ::std::vec::Vec<u8>,
    pub uncles_hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // uint32 version = 1;


    pub fn get_version(&self) -> u32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    // bytes parent_hash = 2;


    pub fn get_parent_hash(&self) -> &[u8] {
        &self.parent_hash
    }
    pub fn clear_parent_hash(&mut self) {
        self.parent_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.parent_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.parent_hash
    }

    // Take field
    pub fn take_parent_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.parent_hash, ::std::vec::Vec::new())
    }

    // uint64 timestamp = 3;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // uint64 number = 4;


    pub fn get_number(&self) -> u64 {
        self.number
    }
    pub fn clear_number(&mut self) {
        self.number = 0;
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: u64) {
        self.number = v;
    }

    // bytes txs_commit = 5;


    pub fn get_txs_commit(&self) -> &[u8] {
        &self.txs_commit
    }
    pub fn clear_txs_commit(&mut self) {
        self.txs_commit.clear();
    }

    // Param is passed by value, moved
    pub fn set_txs_commit(&mut self, v: ::std::vec::Vec<u8>) {
        self.txs_commit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txs_commit(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.txs_commit
    }

    // Take field
    pub fn take_txs_commit(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.txs_commit, ::std::vec::Vec::new())
    }

    // bytes txs_proposal = 6;


    pub fn get_txs_proposal(&self) -> &[u8] {
        &self.txs_proposal
    }
    pub fn clear_txs_proposal(&mut self) {
        self.txs_proposal.clear();
    }

    // Param is passed by value, moved
    pub fn set_txs_proposal(&mut self, v: ::std::vec::Vec<u8>) {
        self.txs_proposal = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txs_proposal(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.txs_proposal
    }

    // Take field
    pub fn take_txs_proposal(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.txs_proposal, ::std::vec::Vec::new())
    }

    // bytes difficulty = 7;


    pub fn get_difficulty(&self) -> &[u8] {
        &self.difficulty
    }
    pub fn clear_difficulty(&mut self) {
        self.difficulty.clear();
    }

    // Param is passed by value, moved
    pub fn set_difficulty(&mut self, v: ::std::vec::Vec<u8>) {
        self.difficulty = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_difficulty(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.difficulty
    }

    // Take field
    pub fn take_difficulty(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.difficulty, ::std::vec::Vec::new())
    }

    // uint64 nonce = 8;


    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    // bytes proof = 9;


    pub fn get_proof(&self) -> &[u8] {
        &self.proof
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof
    }

    // Take field
    pub fn take_proof(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof, ::std::vec::Vec::new())
    }

    // bytes cellbase_id = 10;


    pub fn get_cellbase_id(&self) -> &[u8] {
        &self.cellbase_id
    }
    pub fn clear_cellbase_id(&mut self) {
        self.cellbase_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cellbase_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.cellbase_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cellbase_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cellbase_id
    }

    // Take field
    pub fn take_cellbase_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cellbase_id, ::std::vec::Vec::new())
    }

    // bytes uncles_hash = 11;


    pub fn get_uncles_hash(&self) -> &[u8] {
        &self.uncles_hash
    }
    pub fn clear_uncles_hash(&mut self) {
        self.uncles_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_uncles_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.uncles_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uncles_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.uncles_hash
    }

    // Take field
    pub fn take_uncles_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.uncles_hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Header {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.parent_hash)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.txs_commit)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.txs_proposal)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.difficulty)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cellbase_id)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.uncles_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.parent_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.parent_hash);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.number != 0 {
            my_size += ::protobuf::rt::value_size(4, self.number, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.txs_commit.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.txs_commit);
        }
        if !self.txs_proposal.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.txs_proposal);
        }
        if !self.difficulty.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.difficulty);
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(8, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.proof);
        }
        if !self.cellbase_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.cellbase_id);
        }
        if !self.uncles_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.uncles_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if !self.parent_hash.is_empty() {
            os.write_bytes(2, &self.parent_hash)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        if self.number != 0 {
            os.write_uint64(4, self.number)?;
        }
        if !self.txs_commit.is_empty() {
            os.write_bytes(5, &self.txs_commit)?;
        }
        if !self.txs_proposal.is_empty() {
            os.write_bytes(6, &self.txs_proposal)?;
        }
        if !self.difficulty.is_empty() {
            os.write_bytes(7, &self.difficulty)?;
        }
        if self.nonce != 0 {
            os.write_uint64(8, self.nonce)?;
        }
        if !self.proof.is_empty() {
            os.write_bytes(9, &self.proof)?;
        }
        if !self.cellbase_id.is_empty() {
            os.write_bytes(10, &self.cellbase_id)?;
        }
        if !self.uncles_hash.is_empty() {
            os.write_bytes(11, &self.uncles_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Header {
        Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "version",
                    |m: &Header| { &m.version },
                    |m: &mut Header| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "parent_hash",
                    |m: &Header| { &m.parent_hash },
                    |m: &mut Header| { &mut m.parent_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &Header| { &m.timestamp },
                    |m: &mut Header| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "number",
                    |m: &Header| { &m.number },
                    |m: &mut Header| { &mut m.number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "txs_commit",
                    |m: &Header| { &m.txs_commit },
                    |m: &mut Header| { &mut m.txs_commit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "txs_proposal",
                    |m: &Header| { &m.txs_proposal },
                    |m: &mut Header| { &mut m.txs_proposal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "difficulty",
                    |m: &Header| { &m.difficulty },
                    |m: &mut Header| { &mut m.difficulty },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &Header| { &m.nonce },
                    |m: &mut Header| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "proof",
                    |m: &Header| { &m.proof },
                    |m: &mut Header| { &mut m.proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "cellbase_id",
                    |m: &Header| { &m.cellbase_id },
                    |m: &mut Header| { &mut m.cellbase_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "uncles_hash",
                    |m: &Header| { &m.uncles_hash },
                    |m: &mut Header| { &mut m.uncles_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Header>(
                    "Header",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Header {
        static mut instance: ::protobuf::lazy::Lazy<Header> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Header,
        };
        unsafe {
            instance.get(Header::new)
        }
    }
}

impl ::protobuf::Clear for Header {
    fn clear(&mut self) {
        self.version = 0;
        self.parent_hash.clear();
        self.timestamp = 0;
        self.number = 0;
        self.txs_commit.clear();
        self.txs_proposal.clear();
        self.difficulty.clear();
        self.nonce = 0;
        self.proof.clear();
        self.cellbase_id.clear();
        self.uncles_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Block {
    // message fields
    pub header: ::protobuf::SingularPtrField<Header>,
    pub transactions: ::protobuf::RepeatedField<Transaction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Block {
    fn default() -> &'a Block {
        <Block as ::protobuf::Message>::default_instance()
    }
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    // .Header header = 1;


    pub fn get_header(&self) -> &Header {
        self.header.as_ref().unwrap_or_else(|| Header::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: Header) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut Header {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> Header {
        self.header.take().unwrap_or_else(|| Header::new())
    }

    // repeated .Transaction transactions = 2;


    pub fn get_transactions(&self) -> &[Transaction] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<Transaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<Transaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<Transaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Block {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.transactions {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Block {
        Block::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Header>>(
                    "header",
                    |m: &Block| { &m.header },
                    |m: &mut Block| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transaction>>(
                    "transactions",
                    |m: &Block| { &m.transactions },
                    |m: &mut Block| { &mut m.transactions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Block>(
                    "Block",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Block {
        static mut instance: ::protobuf::lazy::Lazy<Block> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Block,
        };
        unsafe {
            instance.get(Block::new)
        }
    }
}

impl ::protobuf::Clear for Block {
    fn clear(&mut self) {
        self.header.clear();
        self.transactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Transaction {
    // message fields
    pub version: u32,
    pub deps: ::protobuf::RepeatedField<OutPoint>,
    pub inputs: ::protobuf::RepeatedField<CellInput>,
    pub outputs: ::protobuf::RepeatedField<CellOutput>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    // uint32 version = 1;


    pub fn get_version(&self) -> u32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    // repeated .OutPoint deps = 2;


    pub fn get_deps(&self) -> &[OutPoint] {
        &self.deps
    }
    pub fn clear_deps(&mut self) {
        self.deps.clear();
    }

    // Param is passed by value, moved
    pub fn set_deps(&mut self, v: ::protobuf::RepeatedField<OutPoint>) {
        self.deps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deps(&mut self) -> &mut ::protobuf::RepeatedField<OutPoint> {
        &mut self.deps
    }

    // Take field
    pub fn take_deps(&mut self) -> ::protobuf::RepeatedField<OutPoint> {
        ::std::mem::replace(&mut self.deps, ::protobuf::RepeatedField::new())
    }

    // repeated .CellInput inputs = 3;


    pub fn get_inputs(&self) -> &[CellInput] {
        &self.inputs
    }
    pub fn clear_inputs(&mut self) {
        self.inputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_inputs(&mut self, v: ::protobuf::RepeatedField<CellInput>) {
        self.inputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inputs(&mut self) -> &mut ::protobuf::RepeatedField<CellInput> {
        &mut self.inputs
    }

    // Take field
    pub fn take_inputs(&mut self) -> ::protobuf::RepeatedField<CellInput> {
        ::std::mem::replace(&mut self.inputs, ::protobuf::RepeatedField::new())
    }

    // repeated .CellOutput outputs = 4;


    pub fn get_outputs(&self) -> &[CellOutput] {
        &self.outputs
    }
    pub fn clear_outputs(&mut self) {
        self.outputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_outputs(&mut self, v: ::protobuf::RepeatedField<CellOutput>) {
        self.outputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_outputs(&mut self) -> &mut ::protobuf::RepeatedField<CellOutput> {
        &mut self.outputs
    }

    // Take field
    pub fn take_outputs(&mut self) -> ::protobuf::RepeatedField<CellOutput> {
        ::std::mem::replace(&mut self.outputs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Transaction {
    fn is_initialized(&self) -> bool {
        for v in &self.deps {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.inputs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.outputs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.deps)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.inputs)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.outputs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.deps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        for v in &self.deps {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.inputs {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.outputs {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "version",
                    |m: &Transaction| { &m.version },
                    |m: &mut Transaction| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OutPoint>>(
                    "deps",
                    |m: &Transaction| { &m.deps },
                    |m: &mut Transaction| { &mut m.deps },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CellInput>>(
                    "inputs",
                    |m: &Transaction| { &m.inputs },
                    |m: &mut Transaction| { &mut m.inputs },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CellOutput>>(
                    "outputs",
                    |m: &Transaction| { &m.outputs },
                    |m: &mut Transaction| { &mut m.outputs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Transaction>(
                    "Transaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Transaction {
        static mut instance: ::protobuf::lazy::Lazy<Transaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Transaction,
        };
        unsafe {
            instance.get(Transaction::new)
        }
    }
}

impl ::protobuf::Clear for Transaction {
    fn clear(&mut self) {
        self.version = 0;
        self.deps.clear();
        self.inputs.clear();
        self.outputs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OutPoint {
    // message fields
    pub hash: ::std::vec::Vec<u8>,
    pub index: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutPoint {
    fn default() -> &'a OutPoint {
        <OutPoint as ::protobuf::Message>::default_instance()
    }
}

impl OutPoint {
    pub fn new() -> OutPoint {
        ::std::default::Default::default()
    }

    // bytes hash = 1;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    // uint32 index = 2;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }
}

impl ::protobuf::Message for OutPoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hash);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_bytes(1, &self.hash)?;
        }
        if self.index != 0 {
            os.write_uint32(2, self.index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutPoint {
        OutPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash",
                    |m: &OutPoint| { &m.hash },
                    |m: &mut OutPoint| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "index",
                    |m: &OutPoint| { &m.index },
                    |m: &mut OutPoint| { &mut m.index },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OutPoint>(
                    "OutPoint",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OutPoint {
        static mut instance: ::protobuf::lazy::Lazy<OutPoint> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OutPoint,
        };
        unsafe {
            instance.get(OutPoint::new)
        }
    }
}

impl ::protobuf::Clear for OutPoint {
    fn clear(&mut self) {
        self.hash.clear();
        self.index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CellInput {
    // message fields
    pub hash: ::std::vec::Vec<u8>,
    pub index: u32,
    pub unlock: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CellInput {
    fn default() -> &'a CellInput {
        <CellInput as ::protobuf::Message>::default_instance()
    }
}

impl CellInput {
    pub fn new() -> CellInput {
        ::std::default::Default::default()
    }

    // bytes hash = 1;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    // uint32 index = 2;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // bytes unlock = 3;


    pub fn get_unlock(&self) -> &[u8] {
        &self.unlock
    }
    pub fn clear_unlock(&mut self) {
        self.unlock.clear();
    }

    // Param is passed by value, moved
    pub fn set_unlock(&mut self, v: ::std::vec::Vec<u8>) {
        self.unlock = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unlock(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.unlock
    }

    // Take field
    pub fn take_unlock(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.unlock, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CellInput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.unlock)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hash);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.unlock.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.unlock);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_bytes(1, &self.hash)?;
        }
        if self.index != 0 {
            os.write_uint32(2, self.index)?;
        }
        if !self.unlock.is_empty() {
            os.write_bytes(3, &self.unlock)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CellInput {
        CellInput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash",
                    |m: &CellInput| { &m.hash },
                    |m: &mut CellInput| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "index",
                    |m: &CellInput| { &m.index },
                    |m: &mut CellInput| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "unlock",
                    |m: &CellInput| { &m.unlock },
                    |m: &mut CellInput| { &mut m.unlock },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CellInput>(
                    "CellInput",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CellInput {
        static mut instance: ::protobuf::lazy::Lazy<CellInput> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CellInput,
        };
        unsafe {
            instance.get(CellInput::new)
        }
    }
}

impl ::protobuf::Clear for CellInput {
    fn clear(&mut self) {
        self.hash.clear();
        self.index = 0;
        self.unlock.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CellInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CellInput {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CellOutput {
    // message fields
    pub capacity: u64,
    pub data: ::std::vec::Vec<u8>,
    pub lock: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CellOutput {
    fn default() -> &'a CellOutput {
        <CellOutput as ::protobuf::Message>::default_instance()
    }
}

impl CellOutput {
    pub fn new() -> CellOutput {
        ::std::default::Default::default()
    }

    // uint64 capacity = 1;


    pub fn get_capacity(&self) -> u64 {
        self.capacity
    }
    pub fn clear_capacity(&mut self) {
        self.capacity = 0;
    }

    // Param is passed by value, moved
    pub fn set_capacity(&mut self, v: u64) {
        self.capacity = v;
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // bytes lock = 3;


    pub fn get_lock(&self) -> &[u8] {
        &self.lock
    }
    pub fn clear_lock(&mut self) {
        self.lock.clear();
    }

    // Param is passed by value, moved
    pub fn set_lock(&mut self, v: ::std::vec::Vec<u8>) {
        self.lock = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lock(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.lock
    }

    // Take field
    pub fn take_lock(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.lock, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CellOutput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.capacity = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.lock)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.capacity != 0 {
            my_size += ::protobuf::rt::value_size(1, self.capacity, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        if !self.lock.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.lock);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.capacity != 0 {
            os.write_uint64(1, self.capacity)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        if !self.lock.is_empty() {
            os.write_bytes(3, &self.lock)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CellOutput {
        CellOutput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "capacity",
                    |m: &CellOutput| { &m.capacity },
                    |m: &mut CellOutput| { &mut m.capacity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &CellOutput| { &m.data },
                    |m: &mut CellOutput| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "lock",
                    |m: &CellOutput| { &m.lock },
                    |m: &mut CellOutput| { &mut m.lock },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CellOutput>(
                    "CellOutput",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CellOutput {
        static mut instance: ::protobuf::lazy::Lazy<CellOutput> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CellOutput,
        };
        unsafe {
            instance.get(CellOutput::new)
        }
    }
}

impl ::protobuf::Clear for CellOutput {
    fn clear(&mut self) {
        self.capacity = 0;
        self.data.clear();
        self.lock.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CellOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CellOutput {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13schemas/bench.proto\"m\n\x0bSyncMessage\x12-\n\ngetheaders\x18\x01\
    \x20\x01(\x0b2\x0b.GetHeadersH\0R\ngetheaders\x12$\n\x07headers\x18\x02\
    \x20\x01(\x0b2\x08.HeadersH\0R\x07headersB\t\n\x07payload\"u\n\nGetHeade\
    rs\x12\x18\n\x07version\x18\x01\x20\x01(\rR\x07version\x120\n\x14block_l\
    ocator_hashes\x18\x02\x20\x03(\x0cR\x12blockLocatorHashes\x12\x1b\n\thas\
    h_stop\x18\x03\x20\x01(\x0cR\x08hashStop\",\n\x07Headers\x12!\n\x07heade\
    rs\x18\x01\x20\x03(\x0b2\x07.HeaderR\x07headers\"\xc9\x02\n\x06Header\
    \x12\x18\n\x07version\x18\x01\x20\x01(\rR\x07version\x12\x1f\n\x0bparent\
    _hash\x18\x02\x20\x01(\x0cR\nparentHash\x12\x1c\n\ttimestamp\x18\x03\x20\
    \x01(\x04R\ttimestamp\x12\x16\n\x06number\x18\x04\x20\x01(\x04R\x06numbe\
    r\x12\x1d\n\ntxs_commit\x18\x05\x20\x01(\x0cR\ttxsCommit\x12!\n\x0ctxs_p\
    roposal\x18\x06\x20\x01(\x0cR\x0btxsProposal\x12\x1e\n\ndifficulty\x18\
    \x07\x20\x01(\x0cR\ndifficulty\x12\x14\n\x05nonce\x18\x08\x20\x01(\x04R\
    \x05nonce\x12\x14\n\x05proof\x18\t\x20\x01(\x0cR\x05proof\x12\x1f\n\x0bc\
    ellbase_id\x18\n\x20\x01(\x0cR\ncellbaseId\x12\x1f\n\x0buncles_hash\x18\
    \x0b\x20\x01(\x0cR\nunclesHash\"Z\n\x05Block\x12\x1f\n\x06header\x18\x01\
    \x20\x01(\x0b2\x07.HeaderR\x06header\x120\n\x0ctransactions\x18\x02\x20\
    \x03(\x0b2\x0c.TransactionR\x0ctransactions\"\x91\x01\n\x0bTransaction\
    \x12\x18\n\x07version\x18\x01\x20\x01(\rR\x07version\x12\x1d\n\x04deps\
    \x18\x02\x20\x03(\x0b2\t.OutPointR\x04deps\x12\"\n\x06inputs\x18\x03\x20\
    \x03(\x0b2\n.CellInputR\x06inputs\x12%\n\x07outputs\x18\x04\x20\x03(\x0b\
    2\x0b.CellOutputR\x07outputs\"4\n\x08OutPoint\x12\x12\n\x04hash\x18\x01\
    \x20\x01(\x0cR\x04hash\x12\x14\n\x05index\x18\x02\x20\x01(\rR\x05index\"\
    M\n\tCellInput\x12\x12\n\x04hash\x18\x01\x20\x01(\x0cR\x04hash\x12\x14\n\
    \x05index\x18\x02\x20\x01(\rR\x05index\x12\x16\n\x06unlock\x18\x03\x20\
    \x01(\x0cR\x06unlock\"P\n\nCellOutput\x12\x1a\n\x08capacity\x18\x01\x20\
    \x01(\x04R\x08capacity\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\
    \x12\x12\n\x04lock\x18\x03\x20\x01(\x0cR\x04lockJ\xdc\x12\n\x06\x12\x04\
    \0\0<\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\
    \x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x13\n\x0c\n\x04\x04\0\x08\0\
    \x12\x04\x03\x04\x06\x05\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x03\n\x11\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x04\x08\"\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03\x04\x08\x12\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x04\x13\x1d\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x04\x20!\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \x05\x08\"\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x05\x08\x0f\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x05\x13\x1a\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x05\x20!\n\n\n\x02\x04\x01\x12\x04\t\0\r\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\t\x08\x12\n\x0b\n\x04\x04\x01\x02\0\x12\x03\n\x04,\n\r\n\x05\
    \x04\x01\x02\0\x04\x12\x04\n\x04\t\x14\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\n\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\x13\x1a\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\n*+\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0b\
    \x04,\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x0b\x04\x0c\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x0b\r\x12\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x0b\x13'\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0b*+\n\x0b\n\
    \x04\x04\x01\x02\x02\x12\x03\x0c\x04,\n\r\n\x05\x04\x01\x02\x02\x04\x12\
    \x04\x0c\x04\x0b,\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0c\x04\t\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x0c\x13\x1c\n\x0c\n\x05\x04\x01\
    \x02\x02\x03\x12\x03\x0c*+\n\n\n\x02\x04\x02\x12\x04\x0f\0\x11\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\x0f\x08\x0f\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x10\x04\x20\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x10\x04\x0c\n\x0c\n\
    \x05\x04\x02\x02\0\x06\x12\x03\x10\r\x13\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x10\x14\x1b\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x10\x1e\x1f\n\
    \n\n\x02\x04\x03\x12\x04\x13\0\x1f\x01\n\n\n\x03\x04\x03\x01\x12\x03\x13\
    \x08\x0e\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x14\x04!\n\r\n\x05\x04\x03\
    \x02\0\x04\x12\x04\x14\x04\x13\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\
    \x14\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x14\x0b\x12\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03\x14\x1f\x20\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03\x15\x04!\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x15\x04\x14!\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x03\x15\x04\t\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03\x15\x0b\x16\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x15\x1f\
    \x20\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x16\x04!\n\r\n\x05\x04\x03\x02\
    \x02\x04\x12\x04\x16\x04\x15!\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\
    \x16\x04\n\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x16\x0b\x14\n\x0c\n\
    \x05\x04\x03\x02\x02\x03\x12\x03\x16\x1f\x20\n\x0b\n\x04\x04\x03\x02\x03\
    \x12\x03\x17\x04!\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04\x17\x04\x16!\n\
    \x0c\n\x05\x04\x03\x02\x03\x05\x12\x03\x17\x04\n\n\x0c\n\x05\x04\x03\x02\
    \x03\x01\x12\x03\x17\x0b\x11\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03\x17\
    \x1f\x20\n\x0b\n\x04\x04\x03\x02\x04\x12\x03\x18\x04!\n\r\n\x05\x04\x03\
    \x02\x04\x04\x12\x04\x18\x04\x17!\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\
    \x03\x18\x04\t\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03\x18\x0b\x15\n\x0c\
    \n\x05\x04\x03\x02\x04\x03\x12\x03\x18\x1f\x20\n\x0b\n\x04\x04\x03\x02\
    \x05\x12\x03\x19\x04!\n\r\n\x05\x04\x03\x02\x05\x04\x12\x04\x19\x04\x18!\
    \n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x03\x19\x04\t\n\x0c\n\x05\x04\x03\
    \x02\x05\x01\x12\x03\x19\x0b\x17\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03\
    \x19\x1f\x20\n\x0b\n\x04\x04\x03\x02\x06\x12\x03\x1a\x04!\n\r\n\x05\x04\
    \x03\x02\x06\x04\x12\x04\x1a\x04\x19!\n\x0c\n\x05\x04\x03\x02\x06\x05\
    \x12\x03\x1a\x04\t\n\x0c\n\x05\x04\x03\x02\x06\x01\x12\x03\x1a\x0b\x15\n\
    \x0c\n\x05\x04\x03\x02\x06\x03\x12\x03\x1a\x1f\x20\n\x0b\n\x04\x04\x03\
    \x02\x07\x12\x03\x1b\x04!\n\r\n\x05\x04\x03\x02\x07\x04\x12\x04\x1b\x04\
    \x1a!\n\x0c\n\x05\x04\x03\x02\x07\x05\x12\x03\x1b\x04\n\n\x0c\n\x05\x04\
    \x03\x02\x07\x01\x12\x03\x1b\x0b\x10\n\x0c\n\x05\x04\x03\x02\x07\x03\x12\
    \x03\x1b\x1f\x20\n\x0b\n\x04\x04\x03\x02\x08\x12\x03\x1c\x04!\n\r\n\x05\
    \x04\x03\x02\x08\x04\x12\x04\x1c\x04\x1b!\n\x0c\n\x05\x04\x03\x02\x08\
    \x05\x12\x03\x1c\x04\t\n\x0c\n\x05\x04\x03\x02\x08\x01\x12\x03\x1c\x0b\
    \x10\n\x0c\n\x05\x04\x03\x02\x08\x03\x12\x03\x1c\x1f\x20\n\x0b\n\x04\x04\
    \x03\x02\t\x12\x03\x1d\x04\"\n\r\n\x05\x04\x03\x02\t\x04\x12\x04\x1d\x04\
    \x1c!\n\x0c\n\x05\x04\x03\x02\t\x05\x12\x03\x1d\x04\t\n\x0c\n\x05\x04\
    \x03\x02\t\x01\x12\x03\x1d\x0b\x16\n\x0c\n\x05\x04\x03\x02\t\x03\x12\x03\
    \x1d\x1f!\n\x0b\n\x04\x04\x03\x02\n\x12\x03\x1e\x04\"\n\r\n\x05\x04\x03\
    \x02\n\x04\x12\x04\x1e\x04\x1d\"\n\x0c\n\x05\x04\x03\x02\n\x05\x12\x03\
    \x1e\x04\t\n\x0c\n\x05\x04\x03\x02\n\x01\x12\x03\x1e\x0b\x16\n\x0c\n\x05\
    \x04\x03\x02\n\x03\x12\x03\x1e\x1f!\n\n\n\x02\x04\x04\x12\x04!\0$\x01\n\
    \n\n\x03\x04\x04\x01\x12\x03!\x08\r\n\x0b\n\x04\x04\x04\x02\0\x12\x03\"\
    \x04*\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\"\x04!\x0f\n\x0c\n\x05\x04\x04\
    \x02\0\x06\x12\x03\"\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\"\x0b\
    \x11\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\"()\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03#\x04*\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03#\x04\x0c\n\
    \x0c\n\x05\x04\x04\x02\x01\x06\x12\x03#\r\x18\n\x0c\n\x05\x04\x04\x02\
    \x01\x01\x12\x03#\x19%\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03#()\n\n\n\
    \x02\x04\x05\x12\x04&\0+\x01\n\n\n\x03\x04\x05\x01\x12\x03&\x08\x13\n\
    \x0b\n\x04\x04\x05\x02\0\x12\x03'\x04$\n\r\n\x05\x04\x05\x02\0\x04\x12\
    \x04'\x04&\x15\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03'\x04\n\n\x0c\n\x05\
    \x04\x05\x02\0\x01\x12\x03'\x18\x1f\n\x0c\n\x05\x04\x05\x02\0\x03\x12\
    \x03'\"#\n\x0b\n\x04\x04\x05\x02\x01\x12\x03(\x04$\n\x0c\n\x05\x04\x05\
    \x02\x01\x04\x12\x03(\x04\x0c\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03(\r\
    \x15\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03(\x18\x1c\n\x0c\n\x05\x04\
    \x05\x02\x01\x03\x12\x03(\"#\n\x0b\n\x04\x04\x05\x02\x02\x12\x03)\x04$\n\
    \x0c\n\x05\x04\x05\x02\x02\x04\x12\x03)\x04\x0c\n\x0c\n\x05\x04\x05\x02\
    \x02\x06\x12\x03)\r\x16\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03)\x18\x1e\
    \n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03)\"#\n\x0b\n\x04\x04\x05\x02\x03\
    \x12\x03*\x04$\n\x0c\n\x05\x04\x05\x02\x03\x04\x12\x03*\x04\x0c\n\x0c\n\
    \x05\x04\x05\x02\x03\x06\x12\x03*\r\x17\n\x0c\n\x05\x04\x05\x02\x03\x01\
    \x12\x03*\x18\x1f\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x03*\"#\n\n\n\x02\
    \x04\x06\x12\x04-\00\x01\n\n\n\x03\x04\x06\x01\x12\x03-\x08\x10\n\x0b\n\
    \x04\x04\x06\x02\0\x12\x03.\x04\x15\n\r\n\x05\x04\x06\x02\0\x04\x12\x04.\
    \x04-\x12\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03.\x04\t\n\x0c\n\x05\x04\
    \x06\x02\0\x01\x12\x03.\x0b\x0f\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03.\
    \x13\x14\n\x0b\n\x04\x04\x06\x02\x01\x12\x03/\x04\x15\n\r\n\x05\x04\x06\
    \x02\x01\x04\x12\x04/\x04.\x15\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03/\
    \x04\n\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03/\x0b\x10\n\x0c\n\x05\x04\
    \x06\x02\x01\x03\x12\x03/\x13\x14\n\n\n\x02\x04\x07\x12\x042\06\x01\n\n\
    \n\x03\x04\x07\x01\x12\x032\x08\x11\n\x0b\n\x04\x04\x07\x02\0\x12\x033\
    \x04\x16\n\r\n\x05\x04\x07\x02\0\x04\x12\x043\x042\x13\n\x0c\n\x05\x04\
    \x07\x02\0\x05\x12\x033\x04\t\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x033\x0b\
    \x0f\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x033\x14\x15\n\x0b\n\x04\x04\x07\
    \x02\x01\x12\x034\x04\x16\n\r\n\x05\x04\x07\x02\x01\x04\x12\x044\x043\
    \x16\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x034\x04\n\n\x0c\n\x05\x04\x07\
    \x02\x01\x01\x12\x034\x0b\x10\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x034\
    \x14\x15\n\x0b\n\x04\x04\x07\x02\x02\x12\x035\x04\x16\n\r\n\x05\x04\x07\
    \x02\x02\x04\x12\x045\x044\x16\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\x035\
    \x04\t\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x035\x0b\x11\n\x0c\n\x05\x04\
    \x07\x02\x02\x03\x12\x035\x14\x15\n\n\n\x02\x04\x08\x12\x048\0<\x01\n\n\
    \n\x03\x04\x08\x01\x12\x038\x08\x12\n\x0b\n\x04\x04\x08\x02\0\x12\x039\
    \x04\x18\n\r\n\x05\x04\x08\x02\0\x04\x12\x049\x048\x14\n\x0c\n\x05\x04\
    \x08\x02\0\x05\x12\x039\x04\n\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x039\x0b\
    \x13\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x039\x16\x17\n\x0b\n\x04\x04\x08\
    \x02\x01\x12\x03:\x04\x18\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04:\x049\
    \x18\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03:\x04\t\n\x0c\n\x05\x04\x08\
    \x02\x01\x01\x12\x03:\x0b\x0f\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03:\
    \x16\x17\n\x0b\n\x04\x04\x08\x02\x02\x12\x03;\x04\x18\n\r\n\x05\x04\x08\
    \x02\x02\x04\x12\x04;\x04:\x18\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x03;\
    \x04\t\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03;\x0b\x0f\n\x0c\n\x05\x04\
    \x08\x02\x02\x03\x12\x03;\x16\x17b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
